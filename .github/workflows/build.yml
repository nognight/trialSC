name: build and push to ECR

on:
  workflow_dispatch:
    inputs:
      branch_name:
        description: 'branch or tag name default is master'
        required: true
        default: 'master'
      micro_service:
        description: 'micro service name'
        required: true
        default: 'eurekaServer'

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - name: show branch name
        shell: bash
        run: |
          echo " checkout ref branch name ${GITHUB_REF##*/}"
          echo " checkout head_ref branch name ${GITHUB_HEAD_REF##*/}"
          echo " checkout base_ref branch name ${GITHUB_BASE_REF##*/}"

      - name: show workflow_dispatch
        run: |
          echo "workflow_dispatch input branch ${{ github.event.inputs.branch_name }}!"

      - name: checkout input branch
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.inputs.branch_name }}

      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Build with Gradle
        run:  cd ./${{ github.event.inputs.micro_service }}  && gradle clean bootJar

      - name: configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_ACCESS_KEY_SECRET }}
          aws-region: ${{ secrets.AWS_REGION_PROD }}

      - name: login ECR repository
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: build and push the image
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ AWS_ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd ${{ github.event.inputs.micro_service }}
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: logout
        if: always()
        run: docker logout

